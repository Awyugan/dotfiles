{"commits":[{"commit":"a85927a902d6e5d7805f56a653f324d34dfad53a","date":"2021-04-02T18:24:06-05:00","author":"Michael Sheets","summary":"Regroup and rescope heredocs","body":"Improve the scoping of heredocs by regrouping the matches, also relocate them into the repository for readability."},{"commit":"375f4336908a8eb60dd040f7cfb5e9d00d939375","date":"2020-07-24T11:48:11-04:00","author":"Patrick Cronin","summary":"Support indented heredocs","body":"I initially attempted to implement this with (regex) conditional\nexpressions after seeing an apparent backreference in an end\npattern referencing a capture group from a begin pattern. I soon\nlearned that TextMate performs a string replace on the end\npattern first (replacing things that look like backreferences with\nthe captured values from the begin patterns) before the end\npattern is actually used as a regex. TextMate does not however do\nany such magic that would support conditional expressions in end\npatterns referencing capture groups from begin patterns.\n\nInfininight recommended some regex magic that works within the\nexisting framework of the TextMate grammar though, and this magic\nenables us to make each existing heredoc rule work for both\nregular and indented heredocs, instead of duplicating each rule\nand maintaining one set of rules for regular heredocs and another\nset of rules for indented heredocs.\n\nSo what is the magic? Given an end pattern of\n(^((?!\\1)\\s+)?HTML$), \\1 is replaced by TextMate before being\nused as a regex with the contents of capture group 1 from the\nbegin pattern (as mentioned above). Imagine that the begin\npattern is &lt;&lt;(~)HTML, and so \\1 indicates whether or not the\nheredoc being matched is an indented heredoc.\n\nIn the event the heredoc is indented, we have (^((?!~)\\s+)?HTML$).\nThe negative look-ahead for ~ will always match a correctly-\nformatted terminator, thereby enabling the presence of \\s+\npreceding the terminator. The ? following the whole ((?!~)\\s+)\nmeans that the preceding whitespace isn&#39;t _required_ when an\nindented heredoc is used.\n\nIn the event the heredoc is not indented, we have\n(^((?!)\\s+)?HTML$). The negative look-ahead with no contents\nnever matches, and thus the \\s+ will never be part of a match,\nmeaning whitespace will never be allowed for non-intended heredocs.\n\nIt&#39;s magic."},{"commit":"0f3c6df894695fdaf4fbeb9c0ef8e4c01bae8f43","date":"2020-07-24T11:15:24-04:00","author":"Patrick Cronin","summary":"Add missing unquoted CSS terminator heredoc case"},{"commit":"61807eb85078b9dd1620feb41a2823332ffca4a9","date":"2020-07-24T10:21:58-04:00","author":"Patrick Cronin","summary":"Fix terminator scope recognition"},{"commit":"6768cc2d13d65befde240a43e7c4ff84179787bb","date":"2019-12-26T22:36:21-06:00","author":"Michael Sheets","summary":"Change Carp::Heavy require to be conditional","body":"The ‘Carp::Heavy’ module was incorporated into the ‘Carp’ module in Perl version 5.12. So there is no need to require ‘Carp::Heavy’ in that or subsequent Perl versions.\n\nBased on patch sent in by William Birkett."}],"name":"Perl"}